# 01: The program compiles                                                  [OK]
# 02: The program is executable as ./pipex                                  [OK]
# 03: The program doesn't use forbidden functions                           [OK]
# 04: The program does not crash with no parameters                         [OK]X
# 05: The program does not crash with one parameter                         [OK]X
# 06: The program does not crash with two parameters                        [OK]X
# 07: The program does not crash with three parameters                      [OK]X
# 08: The program exits with the last command's status code                 [OK]X
# 09: The program handles infile's open error                               [OK]X
# 10: The output when infile's open error occur is correct                  [OK]X
# 11: The program handles outfile's open error                              [OK]
# 12: The program handles execve errors                                     [OK]X
# 13: The program handles path that doesn't exist                           [OK]
# 14: The program uses the environment list                                 [KO]X

The next tests will use the following command:
../pipex/pipex "assets/deepthought.txt" "cat" "hostname" "outs/test-xx.txt"

# 15: The program handles the command                                       [OK]
# 16: The output of the command is correct                                  [OK]

The next tests will use the following command:
../pipex/pipex "assets/deepthought.txt" "grep Now" "head -2" "outs/test-xx.txt"

# 17: The program handles the command                                       [OK]
# 18: The output of the command is correct                                  [OK]

The next tests will use the following command:
../pipex/pipex "assets/deepthought.txt" "grep Now" "wc -w" "outs/test-xx.txt"

# 19: The program handles the command                                       [OK]
# 20: The output of the command is correct                                  [OK]

The next tests will use the following command:
../pipex/pipex "assets/deepthought.txt" "grep Now" "cat" "outs/test-xx.txt"
then:
../pipex/pipex "assets/deepthought.txt" "wc -w" "cat" "outs/test-xx.txt"

# 21: The program handles the command                                       [OK]
# 22: The output of the command is correct                                  [OK]

The next tests will use the following command:
../pipex/pipex "assets/deepthought.txt" "notexisting" "wc" "outs/test-xx.txt"
(notexisting is a command that is not supposed to exist)

# 23: The program handles the command                                       [OK]
# 24: The output of the command contains 'command not found'                [OK]
# 25: The output of the command is correct                                  [OK]

The next tests will use the following command:
../pipex/pipex "assets/deepthought.txt" "cat" "notexisting" "outs/test-xx.txt"
(notexisting is a command that is not supposed to exist)

# 26: The program exits with the right status code                          [OK]
# 27: The output of the command contains 'command not found'                [OK]
# 28: The output of the command is correct                                  [OK]

The next tests will use the following command:
../pipex/pipex "assets/deepthought.txt" "grep Now" "/bin/cat" "outs/test-xx.txt"
# 29: The program exits with the right status code                          [OK]
# 30: The output of the command is correct                                  [OK]

The next test will use the following command:
../pipex/pipex "/dev/urandom" "cat" "head -1" "outs/test-xx.txt"

# 31: The program does not timeout                                          [TO]


        Summary

29 OK - 1 KO - 1 TO

OK: Test passed
OK: Not optimal or like bash (should not invalidate the project)
KO: Test did not pass
LK: Test detected leaks
TO: Test timed out




	/* loop for timeout */
		waited_time = 0;
		timeout = 2;
		while (waited_time < timeout)
		{
			/* Wait for the end of child process */
			wait_status = waitpid(-1, &status, WNOHANG);
			if (wait_status == 0)
				break;
			sleep(1);
            waited_time++;
		}
		if (waited_time >= timeout)
			exit (1);
		

		